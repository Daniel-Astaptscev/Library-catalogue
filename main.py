import tkinter as tk
import os
from tkinter import ttk
from tkinter.messagebox import showwarning

from requests import *
from ui_functions import *

class App(tk.Tk):
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ - –∑–∞–ø—É—Å–∫ –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Attributes:
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ —Å—Ç–∏–ª–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –∑–∞–ø—É—Å–∫–µ.

    Methods:
        create_main_menu: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
        create_tree_widget: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        create_progressbar: ???
        item_selected: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –¥–µ—Ä–µ–≤–µ –∑–∞–ø–∏—Å–µ–π
        create_btn_add:
        create_btn_change: –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É -> –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É
        create_btn_delete: –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É -> —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É
        update_tree: –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É -> –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∑–∞–ø–∏—Å–µ–π
        sort_column:
    """

    def __init__(self):
        super().__init__()
        self.title('Library catalogue')
        self.iconbitmap(default='./icons/favicon_main.ico')
        self.window_height = 860
        self.window_width = 1412
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        x_cordinate = int((screen_width/2) - (self.window_width/2))
        y_cordinate = int((screen_height/2) - (self.window_height/2))
        self.geometry("{}x{}+{}+{}".format(self.window_width, self.window_height, x_cordinate, y_cordinate))   
        
        self.flag_sort = True

        create_book.request()
        self.tree = self.create_tree_widget()
        self.menu = self.create_main_menu()
        self.progressbar = self.create_progressbar()

    def create_main_menu(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.

        Returns:
            —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ tk -> –º–µ–Ω—é.
        """
        menu = tk.Menu()
        menu.add_cascade(label='–û–±–Ω–æ–≤–∏—Ç—å', command=self.update_tree)
        menu.add_cascade(label='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É', command=self.create_btn_add)
        menu.add_cascade(label='–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É', command=self.create_btn_change)
        menu.add_cascade(label='–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É', command=btn_find.ButtonFind)
        menu.add_cascade(label='–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É', command=self.create_btn_delete)
        self.config(menu=menu)
        self.option_add('*tearOff', tk.FALSE)
        return menu

    def item_selected(self, event) -> list:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –¥–µ—Ä–µ–≤–µ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        Args:
            event: —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏

        Returns:
            select_item (list): ???.
        """
        for selected_item in self.tree.selection():
            item = self.tree.item(selected_item)
            self.select_item = item['values']
        return self.select_item

    def create_tree_widget(self, bd: list = None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ –æ –∫–Ω–∏–≥–∞—Ö —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            bd (list): –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç —á–µ—Ä–µ–∑ sql-–∑–∞–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é.

        Returns:
            —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ tk -> –¥–µ—Ä–µ–≤–æ –∑–∞–ø–∏—Å–µ–π.
        """
        style = ttk.Style()
        style.theme_use('winnative')
        style.configure('mystyle.Treeview.Heading', font=('Times New '
                                                          'Roman', 14, 'bold'))
        style.configure('mystyle.Treeview', font=('Times New Roman', 14))
        
        self.rowconfigure(index=2, weight=2)
        self.columnconfigure(index=0, weight=1)
        columns = ('column_1', 'column_2', 'column_3', 'column_4', 'column_5')
        self.tree = ttk.Treeview(columns=columns, show='headings', style='mystyle.Treeview')
        self.tree.grid(row=2, column=0, sticky='nsew')

        self.tree.heading('column_1', text='#', anchor='center')
        self.tree.heading('column_2', text='–ê–≤—Ç–æ—Ä', anchor='center', command=lambda: self.sort_column('author'))
        self.tree.heading('column_3', text='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', anchor='center', command=lambda: self.sort_column('title'))
        self.tree.heading('column_4', text='–°–æ—Å—Ç–æ—è–Ω–∏–µ', anchor='center', command=lambda: self.sort_column('state'))
        self.tree.heading('column_5', text='–°—Ç–∞—Ç—É—Å', anchor='center')

        width_column_2, width_column_3 = select_book.request_max_len()

        self.tree.column('#1', stretch=tk.NO, width=40, anchor='center')
        self.tree.column('#2', stretch=tk.NO, width=width_column_2*9,
                         anchor='ne')
        self.tree.column('#3', stretch=tk.NO, width=width_column_3*10)
        self.tree.column('#4', stretch=tk.NO, width=110, anchor='center')
        self.tree.column('#5', stretch=tk.NO, width=80, anchor='center')

        scrollbar = ttk.Scrollbar(orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.grid(row=2, column=1, sticky='ns')

        self.tree.tag_configure('unread', background='#ecf2f9')
        self.tree.tag_configure('read', background='#9fbfdf')

        def insert_book(item):
            book_state = ('‚úîÔ∏è' if item[3] == 1 else '')
            book_masterpiece = ('üèÜ' if item[5] == 1 else '')
            book_trash = ('‚ôª' if item[6] == 1 else '')
            book_status = book_masterpiece + book_trash
            if item[4] == 1:
                self.tree.insert("", tk.END, values=(num, item[1], item[2], book_state, book_status), tags='read')
            else:
                self.tree.insert("", tk.END, values=(num, item[1], item[2], book_state, book_status), tags='unread')
            
        if type(bd) == list:
            if len(bd) == 0:
                showwarning(title='–û—à–∏–±–∫–∞', message='–î–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞/–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
            for num, item in enumerate(bd, start=1):
                insert_book(item)
        else:
            for num, item in enumerate(select_book.request_sort('author', self.flag_sort), start=1):
                insert_book(item)

        self.tree.bind('<<TreeviewSelect>>', self.item_selected)

        return self.tree

    def create_progressbar(self):
        """
        ???
        """
        maximum_value, current_value = select_book.request_sum()

        label_progressbar = ttk.Label(text=f'–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è: {current_value} –ø—Ä–æ—á–∏—Ç–Ω–æ –∏–∑ {maximum_value}', font=('Times New Roman', 12, 'bold'))
        label_progressbar.grid(row=0, column=0, sticky='w')
        progressbar = ttk.Progressbar(orient='horizontal',
                                      length=self.window_width,
                                      maximum=maximum_value,
                                      value=current_value)
        progressbar.grid(row=1, column=0, sticky='n')


    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é 
    ####################################################
    def sort_column(self, column) -> None:
        """
        ???.
        """

        if self.flag_sort: 
            self.update_tree(bd=select_book.request_sort(column, self.flag_sort))
            self.flag_sort = False
        else:
            self.update_tree(bd=select_book.request_sort(column, self.flag_sort))
            self.flag_sort = True


    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    ####################################################
    def create_btn_add(self) -> None:
        """
        –ó–∞–ø—É—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é -> –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É.
        """
        modal_window = btn_add.ButtonAdd()
        modal_window.add_window.wait_window()
        self.update_tree()
        
    def create_btn_change(self) -> None:
        """
        –ó–∞–ø—É—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é -> –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É.
        """
        try:
            modal_window = btn_change.ButtonChange(self.select_item)
            modal_window.add_window.wait_window()
            self.update_tree()
        except AttributeError as error:
            logger.add_log(error, 'change_choice')

    def create_btn_delete(self):
        """
        –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é -> —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É.
        """
        try:
            delete_button = btn_delete.ButtonDelete(self.select_item)
            if delete_button.result:
                self.update_tree()
        except AttributeError as error:
            logger.add_log(error, 'delete')
            

    def update_tree(self, bd: list = None) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ –∑–∞–ø–∏—Å–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∑–∞–ø–∏—Å–µ–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é -> create_tree_widget().

        Args:
            bd (list, optional): –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç —á–µ—Ä–µ–∑ sql-–∑–∞–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é.
        """
        [self.tree.delete(i) for i in self.tree.get_children()]
        self.tree = self.create_tree_widget(bd)


if __name__ == "__main__":  
    if not os.path.isdir('data'):
        os.mkdir('data')
        logs_file = open('./data/logs.txt', 'w')

    app = App()
    app.mainloop()
